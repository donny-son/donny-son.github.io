<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>python on Don&#39;s Thoughts</title>
    <link>https://donny-son.github.io/tags/python/</link>
    <description>Recent content in python on Don&#39;s Thoughts</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 17 Apr 2021 09:47:32 +0900</lastBuildDate><atom:link href="https://donny-son.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cronjob With Conda</title>
      <link>https://donny-son.github.io/posts/cronjob-with-conda/</link>
      <pubDate>Sat, 17 Apr 2021 09:47:32 +0900</pubDate>
      
      <guid>https://donny-son.github.io/posts/cronjob-with-conda/</guid>
      <description>How to setup a python cronjob with conda UNIX based machine users can easily setup automated tasks using the default cronjob module. However, if your using conda environments, it might not just work auto-magically out of the box. After fiddling around with system path variables this is how I made my automated task work.
TL;DR: Don&amp;rsquo;t try to use conda activate &amp;lt;env name&amp;gt;. Set PATH to /opt/anaconda3/envs/&amp;lt;env name&amp;gt;/bin in your crontab.</description>
    </item>
    
    <item>
      <title>Creating Gui for Your Python App</title>
      <link>https://donny-son.github.io/posts/creating-gui-for-your-python-app/</link>
      <pubDate>Thu, 15 Apr 2021 08:05:55 +0900</pubDate>
      
      <guid>https://donny-son.github.io/posts/creating-gui-for-your-python-app/</guid>
      <description>Intro Sometimes it is just nice to make a simple GUI for your python application. There could be a lot of reasons why you want to, or perhaps need to do this.
  For personal use, you might have several machines that you would like to run the application on. For sharing purposes, there might be fellow colleagues who need to use the python application wihtout wanting to interact with the terminal.</description>
    </item>
    
    <item>
      <title>Upload to Pypi</title>
      <link>https://donny-son.github.io/posts/upload-to-pypi/</link>
      <pubDate>Thu, 15 Apr 2021 00:01:49 +0900</pubDate>
      
      <guid>https://donny-son.github.io/posts/upload-to-pypi/</guid>
      <description>Intro Few days ago, I published my first python package to pypi. Here&amp;rsquo;s what I&amp;rsquo;ve learned.
  Tools build and twine were the two fundamental packages. The build package literally builds a repository into a distributable compressed file. This simple command python3 -m build will create a dist/ directory which contains the tar.gz and whl files.
twine can directly upload your repository to pypi and testpypi. testpypi is nothing more than a test version of pypi.</description>
    </item>
    
  </channel>
</rss>
