[{"content":"Recently I have decieded to change my default shell to fish. For the following reasons.\n  Z shell was getting slower due to various packages that I rarely use.\n  Wanted to keep a simple configuration file in my ./config folder.\n  Did not want to spend time on configuration.\n  Well, to tell the truth, zsh was blazing fast in my M1 macbook air, but on my other intel macs the startup time took 2~3 seconds, which was apparently the amount of time that can drive you crazy.\nTroubleshooting Since homebrew is natively supported on Apple Silicon architectures, I installed fish using, brew install fish. And it worked fine. However, when I added the path of the installed fish(/opt/homebrew/fish) to /etc/shells it did not work, giving me chsh: fish: non-standard shell.\nHow to install fish to your m1 mac   Go to the fish homepage and download the installer.   Check your fish path. It should be /usr/local/bin/fish.\n  1  which fish   Append the fish path to your /etc/shells with sudo permissions.  1 2  sudo vim /etc/shells # then dd /usr/local/bin/fish   Then the file would look like this. Use chsh command to change default shell.  1  chsh -s /usr/local/bin/fish   If you exit your current shell and restart your terminal then it would open running the fish shell.\n","permalink":"https://donny-son.github.io/posts/using-fish-shell-in-m1-macs/","summary":"Recently I have decieded to change my default shell to fish. For the following reasons.\n  Z shell was getting slower due to various packages that I rarely use.\n  Wanted to keep a simple configuration file in my ./config folder.\n  Did not want to spend time on configuration.\n  Well, to tell the truth, zsh was blazing fast in my M1 macbook air, but on my other intel macs the startup time took 2~3 seconds, which was apparently the amount of time that can drive you crazy.","title":"Using Fish Shell in M1 Macs"},{"content":" “If you travel back into your own past, that destination becomes your future, and your former present becomes the past, which can\u0026rsquo;t now be changed by your new future.”\n-Hulk from Avengers: Endgame\n Revert and Reset are git commands that come in handy when you need to organize commits or delete them permanently. I will compare these commands how they differ and when they might become useful for a project.\nInitial setup So let’s setup a repository called ExampleRepo. We will start with a single script main.go. And I’ll append new lines in this script for new commits.\n1 2  ExampleRepo └── main.go   1 2 3 4 5 6 7  package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Initial Line\u0026#34;) }   I broke the code intentionally on the third commit as shown below.\nReset simple usage Now let’s say we accidentally made the third commit and we want to get rid of this commit on our git history, since it is a disgrace and you do not want your employer or coworkers to find out about this. How can we do this?\nThis is where the git reset command comes in. The git log after the third commit will look like this. Our objective is to erase the third commit from the history and to rollback to the second commit. The reset command can be used in the following syntax.\n1  git reset \u0026lt;hash of commit:WHERE YOU WANT TO BE\u0026gt;   Now, when you are doing a reset the hash of some commit you used will become the latest commit and all changes you made since then will be unstaged.\nSo in this case, our result output is shown in the below image.\nAnd if we do a git log then we have,\nSo we successfully got rid of our third commit and saved face.\nIf you’re a short-commit type of person then note that you can actually concatenate several short commits into a semantically grouped commit. So from the example above, let’s say I’ve fixed the issue(the fourth commit). Since all commits are nothing but printing log texts, we can concatenate our second, third and fourth commits by reseting to the initial commit and staging changes and commiting them in the following way.\nSo this,\ncan be cleaned up by running the following command.\n1 2 3  git reset 5d5df5e7e387da848196e9021ed23b8370500efc git add . git commit -m \u0026#34;[ADD]Log strings\u0026#34;   Then our git history will look like,\nThe most recent 3 commits where concatenated to the commit where the message is [ADD]Log strings.\ncaution However, when you have already pushed your commits to the remote repository, you would not be able to do a normal git push of your tidy git history. Git will just think that your local branch is behind would refer you to a git pull. You would need a -f flag, the force option, to the push command to force rewrite the git history of the remote repository accordingly to your local branch history.\nAlso note that if other teammates already made changes to your branch and created new branches of their own, as they have already cloned your accident commit, this master plan would not work since git is a distributed version control system.\nThe simple way of avoiding the aforementioned issue is to double check your code before the push.\nRevert Now, sometimes you’re team might find a bug in production code after some merge or a direct commit to the production branch. Then, in this case, you might want to rollback to the previous commit where everything worked smoothly, check where the code broke and fix the issue. This can be done with the revert command. It goes back to a previous commit but keeping the history of that revert. I’m not sure this applies 100%, but Hulk in Avengers:Endgame kind of explains this really well.\n “If you travel back into your own past, that destination becomes your future, and your former present becomes the past, which can\u0026rsquo;t now be changed by your new future.”\n-Hulk\n This is, in essence, git revert. You, as a programmer, are going back in time to your previous commit, making that past commit your present commit and as a result your most recent commit will become the past commit.\nLet’s go back to the previous example.\nNote that our third commit had a bug and failed to run. But, in this case, let’s say that the third commit was a very important feature in our main.go. Then we would need to undo the third commit and go over the code trying to see what broke the program. The revert command can be implemented in the following way.\n1  git revert \u0026lt;hash to commit:COMMIT YOU WANT TO UNDO\u0026gt;   If I try to revert the third commit, I end up with the following prompt. This will be a commit message of my revert.\nIf I write and exit the message, our git log will look like the following image.\nGit reverted my third commit, which means, that in my main.go will print two lines without any issues.\nConclusion In short, reset is setting your local HEAD to a past commit and forgetting commits after that certain point and revert is undoing a certain commit, but your local HEAD being at the latest commit. reset will make your local branch fall behind compared to the remote origin, however revert does not mess up your commit timeline.\n","permalink":"https://donny-son.github.io/posts/git-revert-and-reset-simplified/","summary":"“If you travel back into your own past, that destination becomes your future, and your former present becomes the past, which can\u0026rsquo;t now be changed by your new future.”\n-Hulk from Avengers: Endgame\n Revert and Reset are git commands that come in handy when you need to organize commits or delete them permanently. I will compare these commands how they differ and when they might become useful for a project.","title":"Git Revert and Reset Simplified"},{"content":"[UPDATE]   So, my moonlander keyboard from ZSA arrived today. Ah, the hopes and dreams I had for this keyboard\u0026hellip; But, after actually typing on it, I\u0026rsquo;m very nervous right now. There was a WPM test on their oryx configurator and I naturally tried it out. For first several times, it couldn\u0026rsquo;t even calculate my WPM because accuracy was below 95%. Eventually I ended up getting 22, this is my WPM now. Hope it gets better soon. It has to\u0026hellip;.\n  ","permalink":"https://donny-son.github.io/posts/switching-to-moonlander-keyboard/","summary":"[UPDATE]   So, my moonlander keyboard from ZSA arrived today. Ah, the hopes and dreams I had for this keyboard\u0026hellip; But, after actually typing on it, I\u0026rsquo;m very nervous right now. There was a WPM test on their oryx configurator and I naturally tried it out. For first several times, it couldn\u0026rsquo;t even calculate my WPM because accuracy was below 95%. Eventually I ended up getting 22, this is my WPM now.","title":"Switching to Moonlander Keyboard"},{"content":"Add comments and chatbots on your Hugo website INTRO If you’ve started hosting a static site for blog posts or as an portfolio website, you can implement dynamic features such as comment sections and chat services by delegating these functions to service providers such as Disqus or Drift. In this article I’ll walk you through how I’ve implemented these features on my website built with Hugo.\nDisqus and Drift Disqus Disqus offers the comment plugin feature for your website. Instead of running a personal web server listening to users' POST requests, handling traffics, and all sorts of tedious yet difficult tasks, Disqus does all of the above for you. They have a range of subscription plans that you can choose from, including the basic free plan which I am currently using.\nThe following images is a screenshot of the Disqus comment plugin onto my static website. This is basically adding an HTML \u0026lt;div\u0026gt; at the end of your content and invoking a javascript function call that loads the comment template provided by disqus.\n  Drift With drift, you can implement a chatbot widget which may offer website visitors a more personal experience. In your website it is actually a asynchronous javascript function which calls the chatbot snippet. This code should be inside of your \u0026lt;head\u0026gt;.\n  The chat messages you recieve from visitors can be managed via their website or on their mobile app. The welcome message, chatbot name, and the location and the color scheme of your drift plugin can be configured on their website.\nSetup I won’t be covering every step extensively since there are various articles covering this topic. However, I will focus on how you can implement this to your hugo theme.\nSign Up First and foremost, you will have to create an account and link your website to these services. This process is pretty straightforward since both these services offer easy and informative documentation.\nYou can sign up for disqus here. Note that you should remember the \u0026ldquo;Website Name\u0026rdquo;, since this shortname will appear later on as a variable in your config.yml or config.toml.\nAnd for drift, here’s the link.\nSetting up Disqus for single pages What I’ve done with my website is,\n Add drift chat plugin for all pages. Add disqus comment plugin for every posts.  My content folder, which contains all my posts, the about and search page, will be converted to .html files by using the PaperMod theme based on my config.yml.\n  The layouts of your theme will be inside themes/\u0026lt;themeName\u0026gt;/layouts folder. Under the _default/ folder, the single.html file will be the layout that is used when creating a new post. Since the disqus documentation directs us to put the following code just above the \u0026lt;footer\u0026gt;, we can paste the html code generated from disqus in single.html. Then every new post will have the disqus comment section.\nHowever, sometimes you would like to exclude comment plugins in some single page layouts, in my case, about.md. You can control this by setting a variable(something like comment) in your .md file\u0026rsquo;s frontmatter. We would like there to be a comment section in our markdown content if we set comment: true and false otherwise.\n  And when adding the html code generated by disqus, all you would have to do is add a hugo sytle shortcode if statement in the following way.\n1 2 3 4 5 6 7 8 9 10 11 12 13  {{- if (.Param \u0026#34;comment\u0026#34;) }} \u0026lt;div id=\u0026#34;disqus_thread\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; // ... \u0026lt;/script\u0026gt; \u0026lt;noscript \u0026gt;Please enable JavaScript to view the \u0026lt;a href=\u0026#34;https://disqus.com/?ref_noscript\u0026#34; \u0026gt;comments powered by Disqus.\u0026lt;/a \u0026gt;\u0026lt;/noscript \u0026gt; {{- end }} /* The \u0026lt;footer\u0026gt;starts here... */\u0026lt;/footer\u0026gt;   Therefore, when hugo converts the about.md the .Param \u0026quot;comment” is false so it neither creates nor loads the disques thread.\nSetting up Drift for all pages After signing up on drift, they instruct you to install some javascript code in your \u0026lt;head\u0026gt;. Since having the chatbot appear across all pages gives users a better personal experience, I would like the \u0026lt;script\u0026gt; to go in every \u0026lt;head\u0026gt;.\nUnder themes/\u0026lt;themeName\u0026gt;/layouts/partial you will be able to locate the head.html or the extended_head.html. If you see the latter, than copy the javascript code generated from your drift to extended_head.html. It should look like this\u0026hellip;\nextended_head.html\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53  \u0026lt;!-- Start of Async Drift Code --\u0026gt; \u0026lt;script\u0026gt; \u0026#34;use strict\u0026#34;; !(function () { var t = (window.driftt = window.drift = window.driftt || []); if (!t.init) { if (t.invoked) return void ( window.console \u0026amp;\u0026amp; console.error \u0026amp;\u0026amp; console.error(\u0026#34;Drift snippet included twice.\u0026#34;) ); (t.invoked = !0), (t.methods = [ \u0026#34;identify\u0026#34;, \u0026#34;config\u0026#34;, \u0026#34;track\u0026#34;, \u0026#34;reset\u0026#34;, \u0026#34;debug\u0026#34;, \u0026#34;show\u0026#34;, \u0026#34;ping\u0026#34;, \u0026#34;page\u0026#34;, \u0026#34;hide\u0026#34;, \u0026#34;off\u0026#34;, \u0026#34;on\u0026#34;, ]), (t.factory = function (e) { return function () { var n = Array.prototype.slice.call(arguments); return n.unshift(e), t.push(n), t; }; }), t.methods.forEach(function (e) { t[e] = t.factory(e); }), (t.load = function (t) { var e = 3e5, n = Math.ceil(new Date() / e) * e, o = document.createElement(\u0026#34;script\u0026#34;); (o.type = \u0026#34;text/javascript\u0026#34;), (o.async = !0), (o.crossorigin = \u0026#34;anonymous\u0026#34;), (o.src = \u0026#34;https://js.driftt.com/include/\u0026#34; + n + \u0026#34;/\u0026#34; + t + \u0026#34;.js\u0026#34;); var i = document.getElementsByTagName(\u0026#34;script\u0026#34;)[0]; i.parentNode.insertBefore(o, i); }); } })(); drift.SNIPPET_VERSION = \u0026#34;0.3.1\u0026#34;; drift.load(\u0026#34;*******\u0026#34;); \u0026lt;/script\u0026gt; \u0026lt;!-- End of Async Drift Code --\u0026gt;   If your theme does not offer extended_head.html then just go the head.html and paste the code on top.\nThanks for taking your time to read and hope this helped! More information of using hugo will be uploaded soon.\n","permalink":"https://donny-son.github.io/posts/add-comments-and-chatbots-to-your-hugo-website/","summary":"Add comments and chatbots on your Hugo website INTRO If you’ve started hosting a static site for blog posts or as an portfolio website, you can implement dynamic features such as comment sections and chat services by delegating these functions to service providers such as Disqus or Drift. In this article I’ll walk you through how I’ve implemented these features on my website built with Hugo.\nDisqus and Drift Disqus Disqus offers the comment plugin feature for your website.","title":"Add Comments and Chatbots to Your Hugo Website"},{"content":"How to setup a python cronjob with conda UNIX based machine users can easily setup automated tasks using the default cronjob module. However, if your using conda environments, it might not just work auto-magically out of the box. After fiddling around with system path variables this is how I made my automated task work.\nTL;DR: Don\u0026rsquo;t try to use conda activate \u0026lt;env name\u0026gt;. Set PATH to /opt/anaconda3/envs/\u0026lt;env name\u0026gt;/bin in your crontab. If any local package import error occur, then additionaly set PYTHONPATH to /path/to/your/code/repository in crontab.\nExample Usage Let\u0026rsquo;s say that I want a python script(main.py) in a certain repository(/home/dongookson/test_scripts/) to run every minute using a conda environment called prod.\nDirectory Maps The repository that I use in this example will look something like this.\n1 2 3 4 5 6 7 8  /home/dongookson ├──cron.sh └──test_scripts/ ├── main.py ├── src/ │ └── resource.py └── utils/ └── tool.py   The main.py will just be a simple python script.\n1 2 3 4 5 6 7 8 9 10 11 12 13  from src.resource import * from utils.tool import * from datetime import datetime def foo(): print(f\u0026#34;foo------------------------------------------\u0026#34;) print(f\u0026#34;Foo was called! {datetime.now()}\u0026#34;) print(f\u0026#34;------------------------------------------foo\u0026#34;) return if __name__==\u0026#34;__main__\u0026#34;: foo()   Figuring out the conda environment First, remember that you have two versions of crontab. One will be sudo crontab which has super user privilege and the other is crontab that is associated with your account.\nThen, check your conda env path. This will be essential when you want your script to run under a specific conda environment. If the environment is not specified and your python script uses certain packages associated only with that environment, import errors will occur.\n1 2 3 4 5  (base) dongookson➜~» conda env list # conda environments: # base * /Users/dongookson/opt/anaconda3 prod /Users/dongookson/opt/anaconda3/envs/prod   We can observe that the python resides in the /Users/dongookson/opt/anaconda3/envs/prod. The actual python interpreter binary will be inside /Users/dongookson/opt/anaconda3/envs/prod/bin.\nWe will explicity set this as the PATH variable in our sudo crontab. This can be done in the following way. I use neovim as the default editor so the following command will open up the crontab in neovim.\n1  (base) dongookson➜~» sudo crontab -e   Then all you have to do is write the following content on top of your job.\ncrontab\n1  PATH=/Users/dongookson/opt/anaconda3/envs/prod/bin   Bash scripting Now, you can make a .sh script which consists of various terminal commands in order to execute the /home/dongookson/test_scripts/main.py python script.\nWhen scripting the cron.sh file, just recall the commands that you would normally give the terminal. In this case, it can be,\ncron.sh\n1 2  #!/bin/sh python3 /home/dongookson/test_scripts/main.py   The first part is the shebang. This will run the .sh file with the shell in the shebang directory.\nBut, you can see that something is missing.\nYes, we did not activate conda environment. In my case, this part is not necessary as I\u0026rsquo;ve already set the PATH in the crontab to the prod environment in the above.\nEditing crontab Given that all the steps above are covered, we can add the cronjob to the crontab.\n1  (base) dongookson➜~» sudo crontab -e   crontab\n1 2  PATH=/Users/dongookson/opt/anaconda3/envs/prod/bin * * * * * /home/dongookson/cron.sh \u0026gt;\u0026gt; /home/dongookson/clogs.log 2\u0026gt;\u0026amp;1   The second line is the cronjob which is\n Run the job every minute. The job is to run the cron.sh as a shell script(note that just referencing the shell script will run the commands inside the script due to the shebang) Append(\u0026raquo;) terminal outputs to /home/dongookson/clogs.log If an error occurs treat this as a terminal output(2\u0026gt;\u0026amp;1)  Result I should now get logs in clogs.log. We can see that the foo function was called every minute.\n1 2 3 4 5 6 7 8 9 10  (base) dongookson➜~» cat clogs.log foo------------------------------------------ Foo was called! 2021-04-16 13:47:01.454232 ------------------------------------------foo foo------------------------------------------ Foo was called! 2021-04-16 13:48:01.489774 ------------------------------------------foo foo------------------------------------------ Foo was called! 2021-04-16 13:49:01.529458 ------------------------------------------foo   Troubleshooting Sometimes import problems might occur when you are importing local packages or when you want to run a python script which is not located at the top level in your code repository. From the example above, let\u0026rsquo;s say you want to run resource.py under test_scripts/src/.\nThen I recommend modifying your crontab by adding a PYTHONPATH variable. This variable is an additional directory where your python interpreter will look for modules or packages. So, if you are using custom python libraries outside of the global python package directory(site-packages), this is a mandatory step for running a cronjob.\ncrontab\n1 2 3  PATH=/Users/dongookson/opt/anaconda3/envs/prod/bin PYTHONPATH=/home/dongookson/test_scripts * * * * * /home/dongookson/cron.sh \u0026gt;\u0026gt; /home/dongookson/clogs.log 2\u0026gt;\u0026amp;1   ","permalink":"https://donny-son.github.io/posts/cronjob-with-conda/","summary":"How to setup a python cronjob with conda UNIX based machine users can easily setup automated tasks using the default cronjob module. However, if your using conda environments, it might not just work auto-magically out of the box. After fiddling around with system path variables this is how I made my automated task work.\nTL;DR: Don\u0026rsquo;t try to use conda activate \u0026lt;env name\u0026gt;. Set PATH to /opt/anaconda3/envs/\u0026lt;env name\u0026gt;/bin in your crontab.","title":"Cronjob With Conda"},{"content":"Intro Over the past few years studying statistics, I\u0026rsquo;ve learned a few tips and tricks with R and RStudio.\nImport multiple libraries at once Since R has some object-oriented goodness, importing multiple libraries all at once is possible in the following way.\n1 2  pkgs \u0026lt;- c(\u0026#34;ggplot2\u0026#34;, \u0026#34;dplyr\u0026#34;, \u0026#34;sp\u0026#34;, \u0026#34;sf\u0026#34;, \u0026#34;reticulate\u0026#34;, ...) lapply(library, pkgs, character.only = TRUE)   Also note that importing tidyverse package can come in handy.\nBackwards assignment with pipe(%\u0026gt;%) operators If you\u0026rsquo;re familiar with the concept of tidy data, you already know that the dplyr package supports backwards(?) assignment for variables.\n1 2  library(dplyr) iris %\u0026gt;% head -\u0026gt; iris.head   This comes in handy when you have multiple pipes.\n1 2 3 4 5  library(dplyr) iris %\u0026gt;% some.first.operation %\u0026gt;% ... %\u0026gt;% some.last.operation -\u0026gt; iris.cleaned   The Best IDE for R Personally, it\u0026rsquo;s hands down RStudio. I know other editors such as VSCode, PyCharm support R with various extensions. They are all okay, but none of those could not top RStudio. I just keep comming back to it. The code execution for Rmd files and the variable viewer, the default 2*2 grid layout just gives me some sort of peace of mind. I\u0026rsquo;m perfectly aware that RStudio is not the best editor in the development world, but at least it\u0026rsquo;s great just for R.\nI also use Neovim with Nvim-R. This neovim package offers a similarly satisfying experience as it supports variable viewer with great autocompletion as well.\nTips for RStudio Path Settings using Snippets For roughly 99% of my workflow, I store all my rmd, r, images, csv and .RData all under one repository. But, in RStudio the default path when you first send a command to the R console is not that repository. It actually points to your R kernel path. So, this means everytime you will have to manually copy the absolute link to your repository and setwd().\nLuckily, for us we can use snippets and RStudioAPI library to relieve the pain. Under RStudio Settings(Preferences) \u0026gt; Code at the bottom, you can see Edit snippets. Click and paste the snippet in your snippet file.\n1 2 3  snippet setpath current_working_dir \u0026lt;- dirname(rstudioapi::getActiveDocumentContext()${1:$}path) setwd(current_working_dir)${2}   Then, everytime on top of your script, you can just simply type setpath and Rstudio will recognize this as your snippet and suggests completion. Hit enter and execute the two lines in your console. Just like that, your R console\u0026rsquo;s path is aligned with the R script path you are editing.\nThemes RStudio provides various color themes by default, but somehow I ended up not liking them all. You can actually add colorthemes from this theme editor website.   Fonts I recommend using ligature supported fonts such as JetBrains Mono or Fira Code. They\u0026rsquo;re all open-sourced and looks incredible when in the editor. Math ligatures can save you quite some time on debugging.   Python and R at the Same time I\u0026rsquo;m sure most of you heard that jupyter can run julia, python and r kernels. But, is it easy to use different languages cell by cell? Furthermore, can you share objects between those languages?\nThe reticulate library makes this possible. In the latest version of RStudio you can also handpick your desired python environment associated with the reticulate package. I prefer using a conda environment, so created one named ret and use this as the default interpreter for Rstudio.\nConclusion More tips and tricks will follow. Thanks for taking the time to read 👋.\n","permalink":"https://donny-son.github.io/posts/r-tips-and-tricks/","summary":"Intro Over the past few years studying statistics, I\u0026rsquo;ve learned a few tips and tricks with R and RStudio.\nImport multiple libraries at once Since R has some object-oriented goodness, importing multiple libraries all at once is possible in the following way.\n1 2  pkgs \u0026lt;- c(\u0026#34;ggplot2\u0026#34;, \u0026#34;dplyr\u0026#34;, \u0026#34;sp\u0026#34;, \u0026#34;sf\u0026#34;, \u0026#34;reticulate\u0026#34;, ...) lapply(library, pkgs, character.only = TRUE)   Also note that importing tidyverse package can come in handy.","title":"R Tips and Tricks"},{"content":"Intro Sometimes it is just nice to make a simple GUI for your python application. There could be a lot of reasons why you want to, or perhaps need to do this.\n  For personal use, you might have several machines that you would like to run the application on. For sharing purposes, there might be fellow colleagues who need to use the python application wihtout wanting to interact with the terminal. It\u0026rsquo;s also easier to distribute your program to multiple users. As shown in the attached video, launching the application is simple as double-clicking the custom-made icon. There\u0026rsquo;s no need for individual users to create a virtual python environment, install required packages and so on\u0026hellip;\nJourney It didn\u0026rsquo;t took too long creating my main.py, which consists of one function and one class. The m3u8Downloader class is the core element of this app. It inputs a filename and the url that ends with .m3u8 for each video content. The .m3u8 file acts as a meta data for loading short clips of an entire video. In other words, this is a instruction manual for reconstructing the entire video with short sample videos. I guess this is one way to stop people from easily downloading a video content to their local machine.\nNote that this downloader might not work with other platforms since they could all have different instruction manuals for their content.\nCore Libraries Two python packages were used in this app, requests and m3u8. As many of you know, requests package enables us to simply sends HTTP requests via python. The m3u8 package handles the meta data file and grabs all the child elements for you. So, my task was fairly simple.\n Make a custom parser for the m3u8 python package so it can successfully grab short clips. Send GET requests for the short clips. Merge the downloaded files into a whole video. Miscellaneous tasks such as creating a download directory and deleting all short clips after the merge.  GUI framework The last time I used a python GUI framework was to create an automated PDF extractor for medical reports. I used PyQt5, but it wasn\u0026rsquo;t easy. Also, since it was merely a python wrapper library for the enormous Qt5 framework, the documentation was lacking certain features I value the most during development, docstrings. After some research, I ended up using pysimplegui, and it was absolutely amazing. The documentation was extensive, autocompletion was good, and it was so simple and easy to use.\nMy gui.py contains the GUI layout and the while loop for listening to events and the values of the user input. This was also very straightforward to implement by the PySimpleGui.Window().read() function. If a START event is initiated by the user clicking the START button, the m3u8Downloader from main.py is initialized with values from the PySimpleGui.InputText() objects.\nBuilding the app The building process was very tedious and surprisingly difficult. The pyinstaller command that worked for me was,\n1  pyinstaller --icon -icons.icns --windowed --name LearnusPy gui.py   The first obstacle for me was the icon. Initially, I just wanted my app to be an UNIX executable app without a GUI interface, since my app only asks for two string inputs and takes care of the rest. Also, this app was one of the reasons why I uploaded my tictronome package to pypi mentioned in my previous post. However, it turns out I could not overwrite the executable icon with my icon.icns. Also, Mac users should use .icns format as their app icon. .ico is compatible with Windows.\nSo that is basically why I made a gui.py. Just to use my weird little custom-made icon. Well we all have our obsessions for somethings\u0026hellip;right?\nSince, my app had a GUI now, the --windowed option was given, to tell the installer that we literally need a window for running our app.\nThe other obstacle was that my app, once built, had an unusually long starting time. This was because I was giving the --onefile option to the pyinstaller command. After removing that option, it loaded way faster. This was very interesting to me, considering that several stackoverflow articles regarding pyinstaller used the --onfile option almost like a default setting.\nConclusion The satisfaction after my first successful build was insurmounatble. It started with a small critical thinking like,\n \u0026ldquo;Hey, if we\u0026rsquo;re seeing some content on the browser, why can\u0026rsquo;t we download it? After all it is literally receiving data from the server which has no idea what we\u0026rsquo;re doing on our side\u0026hellip;\u0026rdquo;.\n The entire process of actually figuring out that the intial hypothesis was true and building a solution to overcome the obstacle, it is pure satistcation and a bliss.\n","permalink":"https://donny-son.github.io/posts/creating-gui-for-your-python-app/","summary":"Intro Sometimes it is just nice to make a simple GUI for your python application. There could be a lot of reasons why you want to, or perhaps need to do this.\n  For personal use, you might have several machines that you would like to run the application on. For sharing purposes, there might be fellow colleagues who need to use the python application wihtout wanting to interact with the terminal.","title":"Creating Gui for Your Python App"},{"content":"Intro Few days ago, I published my first python package to pypi. Here\u0026rsquo;s what I\u0026rsquo;ve learned.\n  Tools build and twine were the two fundamental packages. The build package literally builds a repository into a distributable compressed file. This simple command python3 -m build will create a dist/ directory which contains the tar.gz and whl files.\ntwine can directly upload your repository to pypi and testpypi. testpypi is nothing more than a test version of pypi. This comes in handy before you publish to pypi in order to get an exact preview.\nStructuring The following is the project tree structure of my tictronome package. Starting from the top, LICENSE file is a simple text file that contains an open source license. The MIT license is widely used.\nREADME.md should contain instructions on how to install and use your package. I personally recommend creating a separate readme file for pypi since it does not render images in my assets folder. For convenience I just used the same README.md file for my GitHub repo.\nassests directory contains images and resources associated with my README.md file.\nbuild/ is automatically created by running the build command.\npyproject.toml contains configurations of your build system, such as the version of setuptools required.\nsetup.cfg is the core configuration file. This will be a roadmap to your build. The .cfg file is a static config file. However you can also use a dynamic configuration file(setup.py). I decided to use the static configfile from this documentation.\ntest/ contains simple tests for my main scripts.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  ticronome ├── LICENSE ├── README.md ├── assets │ ├── color_example.png │ ├── seconds.gif │ └── simple-tics.gif ├── build │ └── bdist.macosx-10.9-x86_64 ├── pyproject.toml ├── setup.cfg ├── src │ └── tictronome │ ├── __init__.py │ ├── colors │ │ ├── __init__.py │ │ ├── ansi.py │ │ └── colored_string.py │ └── tictronome.py └── tests └── test_tic.py   I used the src directory to be my package directory. So if I do a pip install tictronome, then I can import code in the following way.\n1 2 3  from tictronome.tictronome import Tic from tictronome.colors import ansi from tictronome.colors import colored_string   Note that Tic in the first line is a class defined in tictronome.py.\nTodos Even after some trial and error, I was not able to perform a direct import. In other words, I could not do this.\n1  from tictronome import Tic   Still trying to figure out how I could make this happen.\nAlso, on my next build, I\u0026rsquo;m considering to use a dynamic configuration file(setup.py) and not use the build package and only using the setuptools package.\n","permalink":"https://donny-son.github.io/posts/upload-to-pypi/","summary":"Intro Few days ago, I published my first python package to pypi. Here\u0026rsquo;s what I\u0026rsquo;ve learned.\n  Tools build and twine were the two fundamental packages. The build package literally builds a repository into a distributable compressed file. This simple command python3 -m build will create a dist/ directory which contains the tar.gz and whl files.\ntwine can directly upload your repository to pypi and testpypi. testpypi is nothing more than a test version of pypi.","title":"Upload to Pypi"},{"content":"Intro I used to prefer venv over conda. This was before I had to simultaneously manange multiple projects. For every repository I would easily setup a venv folder in my local machine. Now I completely switched to conda because it\u0026rsquo;s easier to work with jupyter and most of my projects share same packages(numpy, scipy, etc.)\nSummary venv : setting up individual python interpreters(fresh and new) for each project.\nconda : creating and using conda environments for each individual project.\nPersonal Thoughts venv: pro:  native python. Able to use the latest python versions 3.9, 3.10, \u0026hellip; easy to use  con:  take up lots of memory if working simultaneously on multiple projects pip install -r requirements.txt doesn’t always work seamlessly when recreating environments on a different system.  conda: pro:  less compatibility issues with ML frameworks(tensorflow, pytorch). can use both conda install, pip install. saves time installing commonly used packages. works like a charm with jupyter notebooks. No need for fiddling around with ipykernel.  con:  cannot use with latest versions of python.  The following is a handwritten note.\n  ","permalink":"https://donny-son.github.io/posts/venv-vs-conda/","summary":"Intro I used to prefer venv over conda. This was before I had to simultaneously manange multiple projects. For every repository I would easily setup a venv folder in my local machine. Now I completely switched to conda because it\u0026rsquo;s easier to work with jupyter and most of my projects share same packages(numpy, scipy, etc.)\nSummary venv : setting up individual python interpreters(fresh and new) for each project.\nconda : creating and using conda environments for each individual project.","title":"venv vs conda"},{"content":"Hi 👋 I will be uploading the things I\u0026rsquo;ve learned, hopefully, everday. ✌️\n","permalink":"https://donny-son.github.io/posts/first/","summary":"Hi 👋 I will be uploading the things I\u0026rsquo;ve learned, hopefully, everday. ✌️","title":"init post"}]