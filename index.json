[{"content":"Intro Few days ago, I published my first python package to pypi. Here\u0026rsquo;s what I\u0026rsquo;ve learned.\n  Tools build and twine were the two fundamental packages. The build package literally builds a repository into a distributable compressed file. This simple command python3 -m build will create a dist/ directory which contains the tar.gz and whl files.\ntwine can directly upload your repository to pypi and testpypi. testpypi is nothing more than a test version of pypi. This comes in handy before you publish to pypi in order to get an exact preview.\nStructuring The following is the project tree structure of my tictronome package. Starting from the top, LICENSE file is a simple text file that contains an open source license. The MIT license is widely used.\nREADME.md should contain instructions on how to install and use your package. I personally recommend creating a separate readme file for pypi since it does not render images in my assets folder. For convenience I just used the same README.md file for my GitHub repo.\nassests directory contains images and resources associated with my README.md file.\nbuild/ is automatically created by running the build command.\npyproject.toml contains configurations of your build system, such as the version of setuptools required.\nsetup.cfg is the core configuration file. This will be a roadmap to your build. The .cfg file is a static config file. However you can also use a dynamic configuration file(setup.py). I decided to use the static configfile from this documentation.\ntest/ contains simple tests for my main scripts.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  ticronome ├── LICENSE ├── README.md ├── assets │ ├── color_example.png │ ├── seconds.gif │ └── simple-tics.gif ├── build │ └── bdist.macosx-10.9-x86_64 ├── pyproject.toml ├── setup.cfg ├── src │ └── tictronome │ ├── __init__.py │ ├── colors │ │ ├── __init__.py │ │ ├── ansi.py │ │ └── colored_string.py │ └── tictronome.py └── tests └── test_tic.py   I used the src directory to be my package directory. So if I do a pip install tictronome, then I can import code in the following way.\n1 2 3  from tictronome.tictronome import Tic from tictronome.colors import ansi from tictronome.colors import colored_string   Note that Tic in the first line is a class defined in tictronome.py.\nTodos Even after some trial and error, I was not able to perform a direct import. In other words, I could not do this.\n1  from tictronome import Tic   Still trying to figure out how I could make this happen.\nAlso, on my next build, I\u0026rsquo;m considering to use a dynamic configuration file(setup.py) and not use the build package and only using the setuptools package.\n","permalink":"https://donny-son.github.io/posts/upload-to-pypi/","summary":"Intro Few days ago, I published my first python package to pypi. Here\u0026rsquo;s what I\u0026rsquo;ve learned.\n  Tools build and twine were the two fundamental packages. The build package literally builds a repository into a distributable compressed file. This simple command python3 -m build will create a dist/ directory which contains the tar.gz and whl files.\ntwine can directly upload your repository to pypi and testpypi. testpypi is nothing more than a test version of pypi.","title":"Upload to Pypi"},{"content":"Intro I used to prefer venv over conda. This was before I had to simultaneously manange multiple projects. For every repository I would easily setup a venv folder in my local machine. Now I completely switched to conda because it\u0026rsquo;s easier to work with jupyter and most of my projects share same packages(numpy, scipy, etc.)\nSummary venv : setting up individual python interpreters(fresh and new) for each project.\nconda : creating and using conda environments for each individual project.\nPersonal Thoughts venv: pro:  native python. Able to use the latest python versions 3.9, 3.10, \u0026hellip; easy to use  con:  take up lots of memory if working simultaneously on multiple projects pip install -r requirements.txt doesn’t always work seamlessly when recreating environments on a different system.  conda: pro:  less compatibility issues with ML frameworks(tensorflow, pytorch). can use both conda install, pip install. saves time installing commonly used packages. works like a charm with jupyter notebooks. No need for fiddling around with ipykernel.  con:  cannot use with latest versions of python.  The following is a handwritten note.\n  ","permalink":"https://donny-son.github.io/posts/venv-vs-conda/","summary":"Intro I used to prefer venv over conda. This was before I had to simultaneously manange multiple projects. For every repository I would easily setup a venv folder in my local machine. Now I completely switched to conda because it\u0026rsquo;s easier to work with jupyter and most of my projects share same packages(numpy, scipy, etc.)\nSummary venv : setting up individual python interpreters(fresh and new) for each project.\nconda : creating and using conda environments for each individual project.","title":"venv vs conda"},{"content":"Hi 👋 I will be uploading the things I\u0026rsquo;ve learned, hopefully, everday. ✌️\n","permalink":"https://donny-son.github.io/posts/first/","summary":"Hi 👋 I will be uploading the things I\u0026rsquo;ve learned, hopefully, everday. ✌️","title":"init post"}]