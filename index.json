[{"content":"Intro Sometimes it is just nice to make a simple GUI for your python application. There could be a lot of reasons why you want to, or perhaps need to do this.\n  For personal use, you might have several machines that you would like to run the application on. For sharing purposes, there might be fellow colleagues who need to use the python application wihtout wanting to interact with the terminal. It\u0026rsquo;s also easier to distribute your program to multiple users. As shown in the attached video, launching the application is simple as double-clicking the custom-made icon. There\u0026rsquo;s no need for individual users to create a virtual python environment, install required packages and so on\u0026hellip;\nJourney It didn\u0026rsquo;t took too long creating my main.py, which consists of one function and one class. The m3u8Downloader class is the core element of this app. It inputs a filename and the url that ends with .m3u8 for each video content. The .m3u8 file acts as a meta data for loading short clips of an entire video. In other words, this is a instruction manual for reconstructing the entire video with short sample videos. I guess this is one way to stop people from easily downloading a video content to their local machine.\nNote that this downloader might not work with other platforms since they could all have different instruction manuals for their content.\nCore Libraries Two python packages were used in this app, requests and m3u8. As many of you know, requests package enables us to simply sends HTTP requests via python. The m3u8 package handles the meta data file and grabs all the child elements for you. So, my task was fairly simple.\n Make a custom parser for the m3u8 python package so it can successfully grab short clips. Send GET requests for the short clips. Merge the downloaded files into a whole video. Miscellaneous tasks such as creating a download directory and deleting all short clips after the merge.  GUI framework The last time I used a python GUI framework was to create an automated PDF extractor for medical reports. I used PyQt5, but it wasn\u0026rsquo;t easy. Also, since it was merely a python wrapper library for the enormous Qt5 framework, the documentation was lacking certain features I value the most during development, docstrings. After some research, I ended up using pysimplegui, and it was absolutely amazing. The documentation was extensive, autocompletion was good, and it was so simple and easy to use.\nMy gui.py contains the GUI layout and the while loop for listening to events and the values of the user input. This was also very straightforward to implement by the PySimpleGui.Window().read() function. If a START event is initiated by the user clicking the START button, the m3u8Downloader from main.py is initialized with values from the PySimpleGui.InputText() objects.\nBuilding the app The building process was very tedious and surprisingly difficult. The pyinstaller command that worked for me was,\n1  pyinstaller --icon -icons.icns --windowed --name LearnusPy gui.py   The first obstacle for me was the icon. Initially, I just wanted my app to be an UNIX executable app without a GUI interface, since my app only asks for two string inputs and takes care of the rest. Also, this app was one of the reasons why I uploaded my tictronome package to pypi mentioned in my previous post. However, it turns out I could not overwrite the executable icon with my icon.icns. Also, Mac users should use .icns format as their app icon. .ico is compatible with Windows.\nSo that is basically why I made a gui.py. Just to use my weird little custom-made icon. Well we all have our obsessions for somethings\u0026hellip;right?\nSince, my app had a GUI now, the --windowed option was given, to tell the installer that we literally need a window for running our app.\nThe other obstacle was that my app, once built, had an unusually long starting time. This was because I was giving the --onefile option to the pyinstaller command. After removing that option, it loaded way faster. This was very interesting to me, considering that several stackoverflow articles regarding pyinstaller used the --onfile option almost like a default setting.\nConclusion The satisfaction after my first successful build was insurmounatble. It started with a small critical thinking like,\n \u0026ldquo;Hey, if we\u0026rsquo;re seeing some content on the browser, why can\u0026rsquo;t we download it? After all it is literally receiving data from the server which has no idea what we\u0026rsquo;re doing on our side\u0026hellip;\u0026rdquo;.\n The entire process of actually figuring out that the intial hypothesis was true and building a solution to overcome the obstacle, it is pure satistcation and a bliss.\n","permalink":"https://donny-son.github.io/posts/creating-gui-for-your-python-app/","summary":"Intro Sometimes it is just nice to make a simple GUI for your python application. There could be a lot of reasons why you want to, or perhaps need to do this.\n  For personal use, you might have several machines that you would like to run the application on. For sharing purposes, there might be fellow colleagues who need to use the python application wihtout wanting to interact with the terminal.","title":"Creating Gui for Your Python App"},{"content":"Intro Few days ago, I published my first python package to pypi. Here\u0026rsquo;s what I\u0026rsquo;ve learned.\n  Tools build and twine were the two fundamental packages. The build package literally builds a repository into a distributable compressed file. This simple command python3 -m build will create a dist/ directory which contains the tar.gz and whl files.\ntwine can directly upload your repository to pypi and testpypi. testpypi is nothing more than a test version of pypi. This comes in handy before you publish to pypi in order to get an exact preview.\nStructuring The following is the project tree structure of my tictronome package. Starting from the top, LICENSE file is a simple text file that contains an open source license. The MIT license is widely used.\nREADME.md should contain instructions on how to install and use your package. I personally recommend creating a separate readme file for pypi since it does not render images in my assets folder. For convenience I just used the same README.md file for my GitHub repo.\nassests directory contains images and resources associated with my README.md file.\nbuild/ is automatically created by running the build command.\npyproject.toml contains configurations of your build system, such as the version of setuptools required.\nsetup.cfg is the core configuration file. This will be a roadmap to your build. The .cfg file is a static config file. However you can also use a dynamic configuration file(setup.py). I decided to use the static configfile from this documentation.\ntest/ contains simple tests for my main scripts.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  ticronome ├── LICENSE ├── README.md ├── assets │ ├── color_example.png │ ├── seconds.gif │ └── simple-tics.gif ├── build │ └── bdist.macosx-10.9-x86_64 ├── pyproject.toml ├── setup.cfg ├── src │ └── tictronome │ ├── __init__.py │ ├── colors │ │ ├── __init__.py │ │ ├── ansi.py │ │ └── colored_string.py │ └── tictronome.py └── tests └── test_tic.py   I used the src directory to be my package directory. So if I do a pip install tictronome, then I can import code in the following way.\n1 2 3  from tictronome.tictronome import Tic from tictronome.colors import ansi from tictronome.colors import colored_string   Note that Tic in the first line is a class defined in tictronome.py.\nTodos Even after some trial and error, I was not able to perform a direct import. In other words, I could not do this.\n1  from tictronome import Tic   Still trying to figure out how I could make this happen.\nAlso, on my next build, I\u0026rsquo;m considering to use a dynamic configuration file(setup.py) and not use the build package and only using the setuptools package.\n","permalink":"https://donny-son.github.io/posts/upload-to-pypi/","summary":"Intro Few days ago, I published my first python package to pypi. Here\u0026rsquo;s what I\u0026rsquo;ve learned.\n  Tools build and twine were the two fundamental packages. The build package literally builds a repository into a distributable compressed file. This simple command python3 -m build will create a dist/ directory which contains the tar.gz and whl files.\ntwine can directly upload your repository to pypi and testpypi. testpypi is nothing more than a test version of pypi.","title":"Upload to Pypi"},{"content":"Intro I used to prefer venv over conda. This was before I had to simultaneously manange multiple projects. For every repository I would easily setup a venv folder in my local machine. Now I completely switched to conda because it\u0026rsquo;s easier to work with jupyter and most of my projects share same packages(numpy, scipy, etc.)\nSummary venv : setting up individual python interpreters(fresh and new) for each project.\nconda : creating and using conda environments for each individual project.\nPersonal Thoughts venv: pro:  native python. Able to use the latest python versions 3.9, 3.10, \u0026hellip; easy to use  con:  take up lots of memory if working simultaneously on multiple projects pip install -r requirements.txt doesn’t always work seamlessly when recreating environments on a different system.  conda: pro:  less compatibility issues with ML frameworks(tensorflow, pytorch). can use both conda install, pip install. saves time installing commonly used packages. works like a charm with jupyter notebooks. No need for fiddling around with ipykernel.  con:  cannot use with latest versions of python.  The following is a handwritten note.\n  ","permalink":"https://donny-son.github.io/posts/venv-vs-conda/","summary":"Intro I used to prefer venv over conda. This was before I had to simultaneously manange multiple projects. For every repository I would easily setup a venv folder in my local machine. Now I completely switched to conda because it\u0026rsquo;s easier to work with jupyter and most of my projects share same packages(numpy, scipy, etc.)\nSummary venv : setting up individual python interpreters(fresh and new) for each project.\nconda : creating and using conda environments for each individual project.","title":"venv vs conda"},{"content":"Hi 👋 I will be uploading the things I\u0026rsquo;ve learned, hopefully, everday. ✌️\n","permalink":"https://donny-son.github.io/posts/first/","summary":"Hi 👋 I will be uploading the things I\u0026rsquo;ve learned, hopefully, everday. ✌️","title":"init post"}]